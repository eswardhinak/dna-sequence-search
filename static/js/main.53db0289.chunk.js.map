{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","finishedQueries","setFinishedQueries","processingQueries","setProcessingQueries","currentSearchQuery","setCurrentSearchQuery","useEffect","fetchAndUpdateQueryStatuses","fetch","process","method","then","response","json","data","updatedFinishedQueries","updatedProcessingQueries","protein_alignments","forEach","element","state","push","setTimeout","processingQueriesTableRowComponents","query","id","dna_sequence","finishedQueriesTableRowComponents","sequence_record","sequence_location","className","placeholder","value","minRows","onChange","e","target","Button","variant","onClick","preventDefault","headers","body","JSON","stringify","catch","error","console","Table","striped","bordered","hover","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAsIeA,MA5Hf,WAAgB,IAAD,EAEmCC,mBAAS,IAF5C,mBAELC,EAFK,KAEYC,EAFZ,OAGuCF,mBAAS,IAHhD,mBAGLG,EAHK,KAGcC,EAHd,OAIyCJ,mBAAS,IAJlD,mBAILK,EAJK,KAIeC,EAJf,KAObC,qBAAU,WACRC,MACC,IAEH,IAmBMA,EAA8B,SAA9BA,IACJC,MAAMC,oEAA+D,CACnEC,OAAQ,SAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAIC,EAAyB,GACzBC,EAA2B,GAE/BF,EAAKG,mBAAmBC,SAAQ,SAAAC,GACR,aAAlBA,EAAQC,MACVL,EAAuBM,KAAKF,GAE5BH,EAAyBK,KAAKF,MAGlClB,EAAmBc,GACnBZ,EAAqBa,MAEvBM,WAAWf,EAA6B,MAGtCgB,EAAsC,GAC1CrB,EAAkBgB,SAAQ,SAAAM,GACxBD,EAAoCF,KAClC,+BACE,6BAAKG,EAAMC,KACX,6BAAKD,EAAMJ,QACX,6BAAKI,EAAME,sBAIjB,IAAIC,EAAoC,GAYxC,OAXA3B,EAAgBkB,SAAQ,SAAAM,GACtBG,EAAkCN,KAChC,+BACE,6BAAKG,EAAMC,KACX,6BAAKD,EAAMJ,QACX,6BAAKI,EAAME,eACX,6BAA+B,OAA1BF,EAAMI,gBAA2B,YAAcJ,EAAMI,kBAC1D,6BAAiC,OAA5BJ,EAAMK,kBAA6B,YAAcL,EAAMK,2BAKhE,sBAAKC,UAAU,MAAf,UACE,cAAC,IAAD,CACEA,UAAU,mBACVC,YAAY,+BACZC,MAAO5B,EACP6B,QAAS,EACTC,SAAU,SAAAC,GACR9B,EAAsB8B,EAAEC,OAAOJ,UAGnC,cAACK,EAAA,EAAD,CACEC,QAAQ,UACRC,QA5Ee,SAAAJ,GACnBA,EAAEK,iBACFhC,MAAMC,gEAA2D,CAC/DC,OAAQ,OACR+B,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAClB,aAActB,MAErCO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJX,EAAqB,CAACW,GAAF,mBAAWZ,QAEhC2C,OAAM,SAACC,GACNC,QAAQD,MAAM,UAAWA,OA4DzB,oBAMA,oDACA,eAACE,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACE,+BACE,oCACA,uCACA,mDAGJ,gCACG5B,OAGL,mDACA,eAACyB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACE,+BACE,oCACA,uCACA,8CACA,iDACA,wDAGJ,gCACGxB,WClHIyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.53db0289.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table'\n\n// import fetchResults from './services/utils';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n  const [ finishedQueries, setFinishedQueries ] = useState([]);\n  const [ processingQueries, setProcessingQueries ] = useState([]);\n  const [ currentSearchQuery, setCurrentSearchQuery ] = useState(\"\");\n\n\n  useEffect(() => {\n    fetchAndUpdateQueryStatuses();\n  }, [])\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    fetch(process.env.REACT_APP_BACKEND_URI + '/protein_alignment/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({dna_sequence: currentSearchQuery})\n    })\n    .then(response => response.json())\n    .then(data => {\n      setProcessingQueries([data, ...processingQueries])\n    })\n    .catch((error) => {\n      console.error('Error: ', error);\n      // log this error\n    })\n  }\n\n  const fetchAndUpdateQueryStatuses = () => {\n    fetch(process.env.REACT_APP_BACKEND_URI + \"/protein_alignment/list\", {\n      method: 'POST',\n    })\n    .then(response => response.json())\n    .then(data => {\n      let updatedFinishedQueries = []\n      let updatedProcessingQueries = []\n\n      data.protein_alignments.forEach(element => {\n        if (element.state === 'finished') {\n          updatedFinishedQueries.push(element)\n        } else {\n          updatedProcessingQueries.push(element)\n        }\n      })\n      setFinishedQueries(updatedFinishedQueries)\n      setProcessingQueries(updatedProcessingQueries)\n    })\n    setTimeout(fetchAndUpdateQueryStatuses, 5000)\n  }\n\n  let processingQueriesTableRowComponents = []\n  processingQueries.forEach(query => {\n    processingQueriesTableRowComponents.push(\n      <tr>\n        <td>{query.id}</td>\n        <td>{query.state}</td>\n        <td>{query.dna_sequence}</td>\n      </tr>\n    )\n  })\n  let finishedQueriesTableRowComponents = []\n  finishedQueries.forEach(query => {\n    finishedQueriesTableRowComponents.push(\n      <tr>\n        <td>{query.id}</td>\n        <td>{query.state}</td>\n        <td>{query.dna_sequence}</td>\n        <td>{query.sequence_record === null ? \"Not Found\" : query.sequence_record}</td>\n        <td>{query.sequence_location === null ? \"Not Found\" : query.sequence_location}</td>\n      </tr>\n    )\n  })\n  return (\n    <div className=\"App\">\n      <TextareaAutosize\n        className=\"search-query-box\"\n        placeholder=\"Enter DNA Sequence to search\"\n        value={currentSearchQuery}\n        minRows={1}\n        onChange={e => {\n          setCurrentSearchQuery(e.target.value)\n        }}\n      />\n      <Button\n        variant=\"primary\"\n        onClick={handleSubmit}\n      >\n        Search\n      </Button>\n      <h2>Processing Queries</h2>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>id</th>\n            <th>state</th>\n            <th>dna_sequence</th>\n          </tr>\n        </thead>\n        <tbody>\n          {processingQueriesTableRowComponents}\n        </tbody>\n      </Table>\n      <h2>Completed Queries</h2>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>id</th>\n            <th>state</th>\n            <th>dna_sequence</th>\n            <th>sequence record</th>\n            <th>sequence location</th>\n          </tr>\n        </thead>\n        <tbody>\n          {finishedQueriesTableRowComponents}\n        </tbody>\n      </Table>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}